use std::{
    str::FromStr,
    cell::Cell,
};

use crate::typing::{AstType, FixedArrayType};

use crate::ast::{
    AstModule,
    operator::Operator,
    stmt::{
        Stmt, ExprStmt,
        decl::{
            VarKind, UnresolvedVariable, UnresolvedVarDecl,
            Function,
        }
    },

    expr::{
        ident::Ident,
        literal::Literal,
    }
};

use crate::util::unparse_string_literal;

grammar;

DecFloat: f64 = {
    r"(0|[1-9][0-9]+)\.[0-9]+([eE][+-]?[0-9]+)?" => f64::from_str(<>).unwrap(),
    r"(0|[1-9][0-9]+)[eE][+-]?[0-9]+" => f64::from_str(<>).unwrap(),
};
HexFloat: f64 = {
    // 0x1.2p-2
    r"0x[0-9a-fA-F]+(\.[0-9a-fA-F]+)?p[+-]?[0-9]+" => f64::from_str(<>).unwrap()
};

DecInt: isize = r"0|[1-9][0-9]*" => isize::from_str(<>).unwrap();
HexInt: isize = r"0x[0-9a-fA-F]+" => isize::from_str(<>).unwrap();

Word: &'input str = r"[_a-zA-Z][_0-9a-zA-Z]*";

LineComment:  () = r"//[^\n]*" => ();
BlockComment: () = r"/\*([^*]|\*+[^*/])*\*+/" => ();



Ident: Ident = {
    <nbyte: @L> <w:Word> => Ident::Unresolved(w.to_string(), Cell::new(nbyte)),
};

pub Literal: Literal = {
    DecInt => Literal::Int(<> as i32),
    HexInt => Literal::Int(<> as i32),
    DecFloat => Literal::Float(<> as f32),
    HexFloat => Literal::Float(<> as f32),
};
Str: String = r#""([^"\\]|\\.)*""# => unparse_string_literal(<>);

AstType: AstType = {
    "void"  => AstType::Void,
    "int"   => AstType::Int,
    "float" => AstType::Float,
};

